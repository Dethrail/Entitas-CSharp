//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MyEventComponent myEvent { get { return (MyEventComponent)GetComponent(GameComponentsLookup.MyEvent); } }
    public bool hasMyEvent { get { return HasComponent(GameComponentsLookup.MyEvent); } }

    public void AddMyEvent(string newValue) {
        var index = GameComponentsLookup.MyEvent;
        var component = (MyEventComponent)CreateComponent(index, typeof(MyEventComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMyEvent(string newValue) {
        var index = GameComponentsLookup.MyEvent;
        var component = (MyEventComponent)CreateComponent(index, typeof(MyEventComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMyEvent() {
        RemoveComponent(GameComponentsLookup.MyEvent);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMyEvent;

    public static Entitas.IMatcher<GameEntity> MyEvent {
        get {
            if (_matcherMyEvent == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MyEvent);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMyEvent = matcher;
            }

            return _matcherMyEvent;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
[Entitas.CodeGeneration.Attributes.DontGenerate(false)]
public sealed class AnyMyEventListenerComponent : Entitas.IComponent {
    public System.Collections.Generic.List<IAnyMyEventListener> value;
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public interface IAnyMyEventListener {
    void OnAnyMyEvent(GameEntity entity, string value);
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventSystemGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed class AnyMyEventEventSystem : Entitas.ReactiveSystem<GameEntity> {

    readonly Entitas.IGroup<GameEntity> _listeners;
    readonly System.Collections.Generic.List<GameEntity> _entityBuffer;
    readonly System.Collections.Generic.List<IAnyMyEventListener> _listenerBuffer;

    public AnyMyEventEventSystem(Contexts contexts) : base(contexts.game) {
        _listeners = contexts.game.GetGroup(GameMatcher.AnyMyEventListener);
        _entityBuffer = new System.Collections.Generic.List<GameEntity>();
        _listenerBuffer = new System.Collections.Generic.List<IAnyMyEventListener>();
    }

    protected override Entitas.ICollector<GameEntity> GetTrigger(Entitas.IContext<GameEntity> context) {
        return Entitas.CollectorContextExtension.CreateCollector(
            context, Entitas.TriggerOnEventMatcherExtension.Added(GameMatcher.MyEvent)
        );
    }

    protected override bool Filter(GameEntity entity) {
        return entity.hasMyEvent;
    }

    protected override void Execute(System.Collections.Generic.List<GameEntity> entities) {
        foreach (var e in entities) {
            var component = e.myEvent;
            foreach (var listenerEntity in _listeners.GetEntities(_entityBuffer)) {
                _listenerBuffer.Clear();
                _listenerBuffer.AddRange(listenerEntity.anyMyEventListener.value);
                foreach (var listener in _listenerBuffer) {
                    listener.OnAnyMyEvent(e, component.value);
                }
            }
        }
    }
}
